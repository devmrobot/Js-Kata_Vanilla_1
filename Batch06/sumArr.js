/*
[EN] 
write a function, which takes two parameters.
These two parameters are arrays of number strings.
Your function must return a single array with the sum of
corresponding elements converted into a string.
If one of the two elements is empty, it should be considered as 0.
Example :
sumArr (["1", "2", "3"], ["2", "4", "1"]) should return ["3", "6", "4"]
sumArr (["2", "7", "3"], ["2", "4", "9"]) should return ["4", "11", "12"]
sumArr (["2", "7", "3", "8", "2"], ["2", "4", "9"]) should return ["4", "11", " 12 "," 8 "," 2 "]

[FR] 
√©cris une fonction, qui prend deux param√®tres.
Ces deux param√®tres sont des arrays de numbres sous forme de chaine de caract√®re.
Ta fonction doit renvoyer un seul array avec la somme des
√©l√©ments correspondants convertis en chaine.
Si l'un des deux √©l√©ments est vide, il doit √™tre consid√©r√© comme 0.
Exemple :
sumArr( ["1", "2", "3"], ["2", "4", "1"] ) doit renvoyer ["3", "6", "4"]
sumArr( ["2", "7", "3"], ["2", "4", "9"] ) doit renvoyer ["4", "11", "12"]
sumArr( ["2", "7", "3", "8", "2"], ["2", "4", "9"] ) doit renvoyer ["4", "11", "12", "8", "2"]
*/

function sumArr(arrayA, arrayB) {
  // TODO
}

module.exports = sumArr;

// Do all the algos. Unit tests are present, they will allow you to know if your algos work!
// To launch them you must first install the dependencies (with npm install üòâ). Then you can run them :

// npm test # this command runs all the tests
// npm run test:1 # this command runs the tests for algo 1 only
// npm run test:2 # this command runs the tests for algo 2 only
// # etc... for all algos.
